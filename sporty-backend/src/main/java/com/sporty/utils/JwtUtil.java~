package com.sporty.utils;

import jakarta.annotation.PostConstruct;
import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;
import org.springframework.stereotype.Service;

import java.io.FileReader;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import io.jsonwebtoken.Jwts;

import java.util.Date;
import java.util.stream.DoubleStream;

@Service
public class JwtUtil {

    private RSAPrivateKey privateKey;
    private RSAPublicKey publicKey;

    @PostConstruct
    public void init() throws Exception {
        // Load private and public keys from files
        this.privateKey = loadPrivateKey("src/main/resources/private_key.pem");

        this.publicKey = loadPublicKey("src/main/resources/public_key.pem");
    }

    public static RSAPrivateKey loadPrivateKey(String filePath) throws Exception {
        PEMParser pemParser = new PEMParser(new FileReader(filePath));
        PemObject pemObject = (PemObject) pemParser.readObject();
        pemParser.close();

        byte[] encoded = pemObject.getContent();
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

    public static RSAPublicKey loadPublicKey(String filePath) throws Exception {
        // Read the file containing the public key
        FileInputStream fis = new FileInputStream(filePath);
        byte[] encodedKey = fis.readAllBytes();
        fis.close();

        // Decode the key from PEM format (Base64)
        String publicKeyPEM = new String(encodedKey);
        publicKeyPEM = publicKeyPEM.replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", "").replaceAll("\n", "");

        // Convert the decoded string to byte array
        byte[] decodedKey = Base64.getDecoder().decode(publicKeyPEM);

        // Create a KeyFactory and generate the public key
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
        return keyFactory.generatePublic(keySpec);
    }


    public String generateToken(String username, long expirationMs) {
        DoubleStream Jwts;
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs))
                .signWith(privateKey, SignatureAlgorithm.RS256)
                .compact();
    }

    public String validateTokenAndGetUsername(String token) {
        try {
            return Jwts.parserBuilder()
                    .setSigningKey(publicKey)
                    .build()
                    .parseClaimsJws(token)
                    .getBody()
                    .getSubject();
        } catch (Exception e) {
            return null;
        }
    }
}